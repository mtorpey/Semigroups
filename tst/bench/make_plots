#!/usr/bin/env python
# pylint: skip-file

import os
import matplotlib.pyplot as plt
import time
import sys
import numpy as np

#plt.rcParams['font.family'] = 'Times New Roman'

def reject_outliers(data, m=2):
    mean = np.mean(data[0])
    std = np.std(data[0])
    i = 0
    while i < len(data[0]):
        if data[0][i] - mean >= 2 * std:
            del data[0][i]
            del data[1][i]
        else:
            i += 1


def make_plot(filename):
    format = 'pdf'
    outpath = '/'.join(filename.split('/')[0:-1])
    f = file(filename, 'r')
    lines = f.readlines()
    header = lines[0]
    print header
    if header.find("(Trans)") != -1:
        # Transformation semigroups
        fp_test = False
        title = 'Transformation semigroups'
        outfile = outpath + '/bench-trans-'
    else:
        # FP semigroups
        fp_test = True
        title = 'Finitely presented semigroups'
        outfile = outpath + '/bench-fp-'
    if header.find(",,,") != -1:
        only_tc = True
        outfile = outfile + 'tc-'
    else:
        only_tc = False
    data = np.array([np.array(map(float, eval(line.strip())))
                     for line in lines[1:]]) # ignore header
    f.close()

#   title = title + ', with ' + str(int(data[1][1])) + ' generating pairs'
    title = title + ', with variable generating pairs'
    outfile = outfile + 'vp-'
    print title

    #
    # PLOT 1: Big comparison (by Size of S)
    #
    X = data[:,0]
    plt.yscale('log')
#   plt.plot(X, data[:,0], 'rx', label=u'Size of S')
#   plt.plot(X, data[:,1], 'rx', label=u'Number of generating pairs')
#   plt.plot(X, data[:,2], 'rx', label=u'Number of classes')
    plt.plot(X, data[:,3], 'gx', label=u'tc')
    if not fp_test:
        plt.plot(X, data[:,4], 'mx', label=u'tc_prefill')
    if not only_tc:
        plt.plot(X, data[:,5], 'yx', label=u'kb')
    if (not fp_test) and (not only_tc):
        plt.plot(X, data[:,6], 'cx', label=u'p')
    plt.plot(X, data[:,7], 'kx', label=u'default')
    if not only_tc:
        plt.plot(X, data[:,8], 'bx', label=u'GAP')
    if fp_test and (not only_tc):
        plt.plot(X, data[:,9], 'rx', label=u'kbmag')
    plt.legend(loc='best')
    plt.xlabel('Size of S')
    plt.ylabel('Time taken (ms)')
    plt.title(title)
    plt.savefig(outfile + 'times' + '.' + format, format=format)
    plt.close()

    #
    # PLOT 2: tc vs tc_prefill (nrclasses scale)
    #
    X = (data[:,2] - 1) / (data[:,0] - 1)
    plt.yscale('log')
    plt.plot(X, data[:,3] / data[:,4], 'g.', label=u'tc')
    plt.hlines(1, -0.05, 1)
    plt.legend(loc='best')
    plt.xlabel('(Number of classes - 1) / (Number of elements - 1)')
    plt.ylabel('Time taken compared to tc_prefill')
    plt.title(title)
    plt.savefig(outfile + 'tccomp' + '.' + format, format=format)
    plt.close()

    #
    # PLOT 3: GAP vs default (sorted)
    #
    if not only_tc:
        gap_to_default = data[:,8] / data[:,7]
        gap_to_default.sort()
        plt.yscale('log')
        plt.plot(gap_to_default, 'b.', alpha=1.0, label=u'GAP')
        plt.hlines(1, 0, len(gap_to_default))
        plt.legend(loc='best')
        plt.xlabel('Test number')
        plt.ylabel('Time taken compared to default')
        plt.title(title)
        plt.savefig(outfile + 'gap' + '.' + format, format=format)
        plt.close()

        # Find cases where GAP is better
        bads = []
        for i in xrange(len(gap_to_default)):
            if gap_to_default[i] < 1:
                bads.append(i)
                print (data[i][7], data[i][8])
        #print bads

    #
    # PLOT 4: Big comparison BUT (by nrclasses)
    #
    X = (data[:,2] - 1) / (data[:,0] - 1)
    plt.yscale('log')
#   plt.plot(X, data[:,0], 'rx', label=u'Size of S')
#   plt.plot(X, data[:,1], 'rx', label=u'Number of generating pairs')
#   plt.plot(X, data[:,2], 'rx', label=u'Number of classes')
    plt.plot(X, data[:,3], 'gx', label=u'tc')
    if not fp_test:
        plt.plot(X, data[:,4], 'mx', label=u'tc_prefill')
    if not only_tc:
        plt.plot(X, data[:,5], 'yx', label=u'kb')
    if (not fp_test) and (not only_tc):
        plt.plot(X, data[:,6], 'cx', label=u'p')
    plt.plot(X, data[:,7], 'kx', label=u'default')
    if not only_tc:
        plt.plot(X, data[:,8], 'bx', label=u'GAP')
    if fp_test and (not only_tc):
        plt.plot(X, data[:,9], 'rx', label=u'KBMAG')
    plt.legend(loc='best')
    plt.xlabel('(Number of classes - 1) / (Number of elements - 1)')
    plt.ylabel('Time taken (ms)')
    plt.title(title)
    plt.savefig(outfile + 'bynrclasses' + '.' + format, format=format)
    plt.close()

    print 'Number of tests:', len(data)
#   print 'Number of generating pairs:', np.unique(data[:,1])
    print 'Average time taken:', int(np.round(np.mean(data[:,3:]))), "ms"
    total_secs = int(np.round(np.sum(data[:,3:])/1000))
    print 'Longest time taken:', int(data.max()), "ms"
    print 'Total time taken:', total_secs, "sec"
    print '                 ', total_secs/60, "min"
    print '                 ', total_secs/60/60, "hr"
    print 'See: ' + outfile + '*.' + format


dir_path = os.path.dirname(os.path.realpath(__file__))
make_plot(dir_path + '/output.csv')
sys.exit(0)
