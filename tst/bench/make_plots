#!/usr/bin/env python
# pylint: skip-file

import os
import matplotlib.pyplot as plt
import time
import sys
import numpy as np

#plt.rcParams['font.family'] = 'Times New Roman'

def reject_outliers(data, m=2):
    mean = np.mean(data[0])
    std = np.std(data[0])
    i = 0
    while i < len(data[0]):
        if data[0][i] - mean >= 2 * std:
            del data[0][i]
            del data[1][i]
        else:
            i += 1


def make_plot(filename):
    f = file(filename, 'r')
    data = np.array([np.array(eval(line.strip())) for line in f.readlines()[1:]]) # ignore header
    f.close()

    # Compare GAP to default
    gap_to_default = data[:,8] / data[:,7]
    gap_to_default.sort()

    # Find cases where GAP is better
    bads = []
    for i in xrange(len(gap_to_default)):
        if gap_to_default[i] < 1:
            bads.append(i)
            print (data[i][7], data[i][8])
    #print bads

    # Plot all the data
    X = data[:,0]
    plt.yscale('log')
#   plt.plot(X, data[:,0], 'rx', label=u'Size of S')
#   plt.plot(X, data[:,1], 'rx', label=u'Number of generating pairs')
#   plt.plot(X, data[:,2], 'rx', label=u'Number of classes')
    plt.plot(X, data[:,3], 'gx', label=u'tc')
    plt.plot(X, data[:,4], 'mx', label=u'tc_prefill')
    plt.plot(X, data[:,5], 'yx', label=u'kbfp')
    plt.plot(X, data[:,6], 'cx', label=u'p')
    plt.plot(X, data[:,7], 'rx', label=u'default')
    plt.plot(X, data[:,8], 'bx', label=u'GAP')
    plt.legend(loc='best')
    x1,x2,y1,y2 = plt.axis()
    plt.xlabel('Size of S')
    plt.ylabel('Time taken (ms)')

    # Plot GAP vs default
    #plt.plot(gap_to_default, 'b.', alpha=1.0, label=u'GAP')
    #plt.hlines(1, 0, len(gap_to_default))

    plt.savefig(filename + '.pdf', format='pdf')
    plt.close()

    print 'Number of tests:', len(data)
    print 'Average time taken:', int(np.round(np.mean(data[:,3:]))), "ms"
    total_secs = int(np.round(np.sum(data[:,3:])/1000))
    print 'Longest time taken:', data.max()
    print 'Total time taken:', total_secs, "sec"
    print '                 ', total_secs/60, "min"
    print '                 ', total_secs/60/60, "hr"
    print 'See: ' + filename + '.pdf'


dir_path = os.path.dirname(os.path.realpath(__file__))
make_plot(dir_path + '/output.csv')
sys.exit(0)
